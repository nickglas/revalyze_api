name: Build and Deploy

on:
  push:
    branches:
      - main

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    env:
      IMAGE_NAME: nickglas/revalyze-api
      IMAGE_TAG: latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Use Node.js 18.x
        uses: actions/setup-node@v3
        with:
          node-version: 18

      - name: Install dependencies
        run: npm ci

      - name: Run tests
        run: npm test
        env:
          JWT_SECRET: ${{ secrets.JWT_SECRET }}
          JWT_REFRESH_SECRET: ${{ secrets.JWT_REFRESH_SECRET }}
          STRIPE_SECRET_KEY: ${{ secrets.STRIPE_SECRET_KEY }}
          NODE_ENV: test

      - name: Get current git commit hash
        id: git-info
        run: echo "RUN_ID=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT

      - name: Get build timestamp
        id: build-time
        run: echo "BUILD_TIME=$(date -u +'%Y-%m-%dT%H:%M:%SZ')" >> $GITHUB_OUTPUT

      - name: Get build info
        id: build-info
        run: |
          echo "RUN_ID=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT
          echo "RUN_NUMBER=${{ github.run_number }}" >> $GITHUB_OUTPUT
          echo "RUN_ATTEMPT=${{ github.run_attempt }}" >> $GITHUB_OUTPUT

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}
          build-args: |
            RUN_ID=${{ steps.build-info.outputs.RUN_ID }}
            RUN_NUMBER=${{ steps.build-info.outputs.RUN_NUMBER }}
            RUN_ATTEMPT=${{ steps.build-info.outputs.RUN_ATTEMPT }}

      - name: Deploy to VPS via SSH
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USER }}
          key: ${{ secrets.VPS_SSH_KEY }}
          script: |
            if [ ! -d "/home/ubuntu/revalyze/.git" ]; then
              git clone https://github.com/nickglas/revalyze_api.git /home/ubuntu/revalyze
            else
              cd /home/ubuntu/revalyze && git pull origin main
            fi

            # Permissions for security
            chmod 600 /home/ubuntu/revalyze/.env

            # Kubernetes setup
            microk8s.kubectl get namespace revalyze || microk8s.kubectl create namespace revalyze

            # Create K8s secret from GitHub secrets
            microk8s.kubectl delete secret jwt-secrets -n revalyze --ignore-not-found
            microk8s.kubectl create secret generic jwt-secrets \
              --from-literal=jwt_secret=${{ secrets.JWT_SECRET }} \
              --from-literal=stripe_secret_key=${{ secrets.STRIPE_SECRET_KEY }} \
              --from-literal=jwt_refresh_secret=${{ secrets.JWT_REFRESH_SECRET }} \
              -n revalyze

            microk8s.kubectl get namespace kubernetes-dashboard || microk8s.kubectl create namespace kubernetes-dashboard

            microk8s.kubectl apply -f k8s/

            microk8s.kubectl rollout restart deployment/revalyze-api -n revalyze