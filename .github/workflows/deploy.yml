name: Build and Deploy

on:
  push:
    branches:
      - main

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    env:
      IMAGE_NAME: nickglas/revalyze-api
      IMAGE_TAG: latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Use Node.js 18.x
        uses: actions/setup-node@v3
        with:
          node-version: 18

      - name: Install dependencies
        run: npm ci

      - name: Check required GitHub secrets presence
        run: |
          secrets=(
            "${{ secrets.DOCKERHUB_TOKEN }}"
            "${{ secrets.DOCKERHUB_USERNAME }}"
            "${{ secrets.JWT_REFRESH_SECRET }}"
            "${{ secrets.JWT_SECRET }}"
            "${{ secrets.OPENAI_API_KEY }}"
            "${{ secrets.STRIPE_SECRET_KEY }}"
            "${{ secrets.VPS_HOST }}"
            "${{ secrets.VPS_SSH_KEY }}"
            "${{ secrets.VPS_USER }}"
            "${{ secrets.SMTP_HOST }}"
            "${{ secrets.SMTP_PORT }}"
            "${{ secrets.SMTP_USER }}"
            "${{ secrets.SMTP_PASS }}"
          )
          secret_names=(
            "DOCKERHUB_TOKEN"
            "DOCKERHUB_USERNAME"
            "JWT_REFRESH_SECRET"
            "JWT_SECRET"
            "OPENAI_API_KEY"
            "STRIPE_SECRET_KEY"
            "VPS_HOST"
            "VPS_SSH_KEY"
            "VPS_USER"
            "SMTP_HOST"
            "SMTP_PORT"
            "SMTP_USER"
            "SMTP_PASS"
          )

          missing=0
          for i in "${!secrets[@]}"; do
            if [ -z "${secrets[$i]}" ]; then
              echo "::error::Secret ${secret_names[$i]} is NOT set!"
              missing=$((missing+1))
            fi
          done

          if [ $missing -ne 0 ]; then
            echo "Missing $missing required secret(s). Failing workflow."
            exit 1
          else
            echo "All required secrets are set."
          fi

      # - name: Run tests
      #   run: npm test
      #   env:
      #     JWT_SECRET: ${{ secrets.JWT_SECRET }}
      #     JWT_REFRESH_SECRET: ${{ secrets.JWT_REFRESH_SECRET }}
      #     STRIPE_SECRET_KEY: ${{ secrets.STRIPE_SECRET_KEY }}
      #     NODE_ENV: test

      - name: Get current git commit hash
        id: git-info
        run: echo "RUN_ID=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT

      - name: Get build timestamp
        id: build-time
        run: echo "BUILD_TIME=$(date -u +'%Y-%m-%dT%H:%M:%SZ')" >> $GITHUB_OUTPUT

      - name: Get build info
        id: build-info
        run: |
          echo "RUN_ID=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT
          echo "RUN_NUMBER=${{ github.run_number }}" >> $GITHUB_OUTPUT
          echo "RUN_ATTEMPT=${{ github.run_attempt }}" >> $GITHUB_OUTPUT

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push multi-platform image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          platforms: linux/amd64,linux/arm64
          tags: ${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}
          build-args: |
            RUN_ID=${{ steps.build-info.outputs.RUN_ID }}
            RUN_NUMBER=${{ steps.build-info.outputs.RUN_NUMBER }}
            RUN_ATTEMPT=${{ steps.build-info.outputs.RUN_ATTEMPT }}

      - name: Deploy to VPS via SSH
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USER }}
          key: ${{ secrets.VPS_SSH_KEY }}
          script: |
            # Clone/update repo
            if [ ! -d "/home/ubuntu/revalyze/.git" ]; then
              git clone https://github.com/nickglas/revalyze_api.git /home/ubuntu/revalyze
            else
              cd /home/ubuntu/revalyze && git pull origin main
            fi

            # Setup namespaces
            microk8s.kubectl create namespace revalyze --dry-run=client -o yaml | microk8s.kubectl apply -f -
            microk8s.kubectl create namespace kubernetes-dashboard --dry-run=client -o yaml | microk8s.kubectl apply -f -

            # Apply secrets
            cat <<EOF | microk8s.kubectl apply -f -
            apiVersion: v1
            kind: Secret
            metadata:
              name: jwt-secrets
              namespace: revalyze
            type: Opaque
            stringData:
              jwt_secret: "${{ secrets.JWT_SECRET }}"
              jwt_refresh_secret: "${{ secrets.JWT_REFRESH_SECRET }}"
              stripe_secret_key: "${{ secrets.STRIPE_SECRET_KEY }}"
              stripe_webhook_secret: "${{ secrets.STRIPE_WEBHOOK_SECRET }}"
              openai_api_key: "${{ secrets.OPENAI_API_KEY }}"
              smtp_host: "${{ secrets.SMTP_HOST }}"
              smtp_port: "${{ secrets.SMTP_PORT }}"
              smtp_user: "${{ secrets.SMTP_USER }}"
              smtp_pass: "${{ secrets.SMTP_PASS }}"
            EOF

            # Apply MongoDB resources
            microk8s.kubectl apply -f k8s/mongo-statefulset.yaml
            microk8s.kubectl apply -f k8s/mongo-service.yaml

            # Wait for MongoDB to be ready
            microk8s.kubectl rollout status statefulset/mongo -n revalyze --timeout=180s

            # Apply other resources
            microk8s.kubectl apply -f k8s/api-deployment.yaml
            microk8s.kubectl apply -f k8s/api-service.yaml
            microk8s.kubectl apply -f k8s/dashboard-access.yaml

            # Restart API deployment
            microk8s.kubectl rollout restart deployment/revalyze-api -n revalyze
